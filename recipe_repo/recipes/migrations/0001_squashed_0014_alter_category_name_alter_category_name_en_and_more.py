# Generated by Django 4.2.15 on 2024-08-30 01:20

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import easy_thumbnails.fields


class Migration(migrations.Migration):

    replaces = [
        ("recipes", "0001_initial"),
        ("recipes", "0002_alter_category_name_alter_category_name_en_and_more"),
        ("recipes", "0003_ingredientqualifier_recipe_source_yieldunit_and_more"),
        ("recipes", "0004_alter_ingredient_qualifier_alter_userrating_rating_and_more"),
        ("recipes", "0005_alter_nutritioninformation_recipe"),
        ("recipes", "0006_nutritioninformation_potassium_and_more"),
        ("recipes", "0007_remove_category_depth_remove_category_numchild_and_more"),
        ("recipes", "0008_recipe_favourited_by"),
        ("recipes", "0009_alter_ingredientgroup_options_ingredientgroup_order"),
        ("recipes", "0010_alter_ingredient_amount_alter_ingredient_amount_max"),
        ("recipes", "0011_remove_category_sub_categories_and_more"),
        ("recipes", "0012_recipe_description_en_recipe_description_fr_and_more"),
        ("recipes", "0013_category_path"),
        ("recipes", "0014_alter_category_name_alter_category_name_en_and_more"),
    ]

    initial = True

    dependencies = [
        ("units", "0002_alter_unit_options"),
        ("food", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=150, unique=True, verbose_name="Name")),
                ("name_en", models.CharField(max_length=150, null=True, verbose_name="Name")),
                ("name_fr", models.CharField(max_length=150, null=True, verbose_name="Name")),
                ("name_ja", models.CharField(max_length=150, null=True, verbose_name="Name")),
                ("name_plural", models.CharField(blank=True, max_length=150, null=True, verbose_name="Plural Name")),
                ("name_plural_en", models.CharField(blank=True, max_length=150, null=True, verbose_name="Plural Name")),
                ("name_plural_fr", models.CharField(blank=True, max_length=150, null=True, verbose_name="Plural Name")),
                ("name_plural_ja", models.CharField(blank=True, max_length=150, null=True, verbose_name="Plural Name")),
                (
                    "slug",
                    models.SlugField(
                        help_text="Automatically generated from the name",
                        unique=True,
                        verbose_name="Slug",
                    ),
                ),
                (
                    "slug_en",
                    models.SlugField(
                        help_text="Automatically generated from the name",
                        null=True,
                        unique=True,
                        verbose_name="Slug",
                    ),
                ),
                (
                    "slug_fr",
                    models.SlugField(
                        help_text="Automatically generated from the name",
                        null=True,
                        unique=True,
                        verbose_name="Slug",
                    ),
                ),
                (
                    "slug_ja",
                    models.SlugField(
                        help_text="Automatically generated from the name",
                        null=True,
                        unique=True,
                        verbose_name="Slug",
                    ),
                ),
                (
                    "image",
                    easy_thumbnails.fields.ThumbnailerImageField(
                        blank=True,
                        null=True,
                        upload_to="images/categories/",
                        verbose_name="Thumbnail",
                    ),
                ),
                (
                    "top_level",
                    models.BooleanField(
                        default=False,
                        help_text="This is one of the top level categories.",
                        verbose_name="Top level",
                    ),
                ),
                (
                    "parent_categories",
                    models.ManyToManyField(
                        blank=True,
                        related_name="sub_categories",
                        to="recipes.category",
                        verbose_name="Parent-categories",
                    ),
                ),
            ],
            options={
                "verbose_name": "Category",
                "verbose_name_plural": "Categories",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="IngredientQualifier",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=100, unique=True, verbose_name="Title")),
                ("title_en", models.CharField(max_length=100, null=True, unique=True, verbose_name="Title")),
                ("title_fr", models.CharField(max_length=100, null=True, unique=True, verbose_name="Title")),
                ("title_ja", models.CharField(max_length=100, null=True, unique=True, verbose_name="Title")),
            ],
            options={
                "verbose_name": "Ingredient Qualifier",
                "verbose_name_plural": "Ingredient Qualifiers",
            },
        ),
        migrations.CreateModel(
            name="Recipe",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=150, verbose_name="Name")),
                ("name_en", models.CharField(max_length=150, null=True, verbose_name="Name")),
                ("name_fr", models.CharField(max_length=150, null=True, verbose_name="Name")),
                ("name_ja", models.CharField(max_length=150, null=True, verbose_name="Name")),
                (
                    "slug",
                    models.SlugField(
                        help_text="Automatically generated from the name",
                        unique=True,
                        verbose_name="Slug",
                    ),
                ),
                (
                    "slug_en",
                    models.SlugField(
                        help_text="Automatically generated from the name",
                        null=True,
                        unique=True,
                        verbose_name="Slug",
                    ),
                ),
                (
                    "slug_fr",
                    models.SlugField(
                        help_text="Automatically generated from the name",
                        null=True,
                        unique=True,
                        verbose_name="Slug",
                    ),
                ),
                (
                    "slug_ja",
                    models.SlugField(
                        help_text="Automatically generated from the name",
                        null=True,
                        unique=True,
                        verbose_name="Slug",
                    ),
                ),
                (
                    "image",
                    easy_thumbnails.fields.ThumbnailerImageField(
                        blank=True,
                        null=True,
                        upload_to="images/recipes/",
                        verbose_name="Image",
                    ),
                ),
                ("description", models.TextField(blank=True, verbose_name="Description")),
                ("description_en", models.TextField(blank=True, null=True, verbose_name="Description")),
                ("description_fr", models.TextField(blank=True, null=True, verbose_name="Description")),
                ("description_ja", models.TextField(blank=True, null=True, verbose_name="Description")),
                ("prep_time", models.DurationField(blank=True, null=True, verbose_name="Prep time")),
                ("cook_time", models.DurationField(blank=True, null=True, verbose_name="Cook time")),
                ("cook_time_max", models.DurationField(blank=True, null=True, verbose_name="Max cook time")),
                ("servings", models.PositiveIntegerField(blank=True, null=True, verbose_name="Servings")),
                ("yield_amount", models.PositiveIntegerField(blank=True, null=True, verbose_name="Yield")),
                ("source_value", models.CharField(blank=True, max_length=250, null=True, verbose_name="Source Value")),
                (
                    "added_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="my_recipes",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Added by",
                    ),
                ),
                (
                    "categories",
                    models.ManyToManyField(
                        blank=True,
                        related_name="recipes",
                        to="recipes.category",
                        verbose_name="Categories",
                    ),
                ),
                (
                    "parent_recipes",
                    models.ManyToManyField(
                        blank=True,
                        related_name="sub_recipes",
                        to="recipes.recipe",
                        verbose_name="Parent recipes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Recipe",
                "verbose_name_plural": "Recipes",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="Source",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=150, unique=True, verbose_name="Name")),
                (
                    "type",
                    models.PositiveIntegerField(
                        choices=[(1, "URL"), (2, "Book"), (3, "Person"), (4, "Other")],
                        default=1,
                        verbose_name="Type",
                    ),
                ),
                ("value", models.CharField(blank=True, max_length=200, null=True, verbose_name="Value")),
            ],
            options={
                "verbose_name": "Source",
                "verbose_name_plural": "Sources",
            },
        ),
        migrations.CreateModel(
            name="YieldUnit",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=150, unique=True, verbose_name="Name")),
                ("name_en", models.CharField(max_length=150, null=True, unique=True, verbose_name="Name")),
                ("name_fr", models.CharField(max_length=150, null=True, unique=True, verbose_name="Name")),
                ("name_ja", models.CharField(max_length=150, null=True, unique=True, verbose_name="Name")),
                ("name_plural", models.CharField(blank=True, max_length=150, null=True, verbose_name="Plural Name")),
                ("name_plural_en", models.CharField(blank=True, max_length=150, null=True, verbose_name="Plural Name")),
                ("name_plural_fr", models.CharField(blank=True, max_length=150, null=True, verbose_name="Plural Name")),
                ("name_plural_ja", models.CharField(blank=True, max_length=150, null=True, verbose_name="Plural Name")),
            ],
            options={
                "verbose_name": "Yield Unit",
                "verbose_name_plural": "Yield Units",
            },
        ),
        migrations.CreateModel(
            name="UserRating",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "rating",
                    models.PositiveIntegerField(
                        choices=[(0, "☆☆☆☆☆"), (1, "★☆☆☆☆"), (2, "★★☆☆☆"), (3, "★★★☆☆"), (4, "★★★★☆"), (5, "★★★★★")],
                        default=0,
                        verbose_name="Rating",
                    ),
                ),
                (
                    "recipe",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ratings",
                        to="recipes.recipe",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ratings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Rating",
                "verbose_name_plural": "User Ratings",
                "unique_together": {("user", "recipe")},
            },
        ),
        migrations.CreateModel(
            name="Step",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("order", models.PositiveIntegerField(blank=True, null=True, verbose_name="Order")),
                ("text", models.TextField(blank=True, verbose_name="Text")),
                ("text_en", models.TextField(blank=True, null=True, verbose_name="Text")),
                ("text_fr", models.TextField(blank=True, null=True, verbose_name="Text")),
                ("text_ja", models.TextField(blank=True, null=True, verbose_name="Text")),
                (
                    "recipe",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="steps",
                        to="recipes.recipe",
                        verbose_name="Recipe",
                    ),
                ),
            ],
            options={
                "verbose_name": "Step",
                "verbose_name_plural": "Steps",
                "ordering": ("order",),
            },
        ),
        migrations.AddField(
            model_name="recipe",
            name="rated_by",
            field=models.ManyToManyField(
                blank=True,
                related_name="rated_recipes",
                through="recipes.UserRating",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Rated by",
            ),
        ),
        migrations.AddField(
            model_name="recipe",
            name="source",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="recipes.source",
                verbose_name="Source",
            ),
        ),
        migrations.AddField(
            model_name="recipe",
            name="yield_unit",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="recipes.yieldunit",
            ),
        ),
        migrations.CreateModel(
            name="IngredientGroup",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=150, unique=True, verbose_name="Name")),
                ("name_en", models.CharField(max_length=150, null=True, verbose_name="Name")),
                ("name_fr", models.CharField(max_length=150, null=True, verbose_name="Name")),
                ("name_ja", models.CharField(max_length=150, null=True, verbose_name="Name")),
                (
                    "recipe",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ingredient_groups",
                        to="recipes.recipe",
                        verbose_name="Recipe",
                    ),
                ),
                ("order", models.PositiveIntegerField(blank=True, null=True, verbose_name="Order")),
            ],
            options={
                "verbose_name": "Ingredient Group",
                "verbose_name_plural": "Ingredient Groups",
                "ordering": ("order",),
            },
        ),
        migrations.CreateModel(
            name="NutritionInformation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("calories", models.PositiveIntegerField(help_text="in kilo-calories", verbose_name="Calories")),
                (
                    "serving_size",
                    models.PositiveIntegerField(
                        help_text="number of servings this corresponds to",
                        verbose_name="Serving Size",
                    ),
                ),
                (
                    "carbohydrate",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="in grams",
                        null=True,
                        verbose_name="Carbohydrates",
                    ),
                ),
                (
                    "protein",
                    models.PositiveIntegerField(blank=True, help_text="in grams", null=True, verbose_name="Protein"),
                ),
                ("fat", models.PositiveIntegerField(blank=True, help_text="in grams", null=True, verbose_name="Fat")),
                (
                    "saturated_fat",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="in grams",
                        null=True,
                        verbose_name="Saturated Fat",
                    ),
                ),
                (
                    "trans_fat",
                    models.PositiveIntegerField(blank=True, help_text="in grams", null=True, verbose_name="Trans Fat"),
                ),
                (
                    "unsaturated_fat",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="in grams",
                        null=True,
                        verbose_name="Unsaturated Fat",
                    ),
                ),
                (
                    "cholesterol",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="in milligrams",
                        null=True,
                        verbose_name="Cholesterol",
                    ),
                ),
                (
                    "sodium",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="in milligrams",
                        null=True,
                        verbose_name="Sodium",
                    ),
                ),
                (
                    "fiber",
                    models.PositiveIntegerField(blank=True, help_text="in grams", null=True, verbose_name="Fiber"),
                ),
                (
                    "sugar",
                    models.PositiveIntegerField(blank=True, help_text="in grams", null=True, verbose_name="Sugar"),
                ),
                (
                    "recipe",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="nutrition",
                        to="recipes.recipe",
                        verbose_name="Recipe",
                    ),
                ),
                (
                    "potassium",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="in milligrams",
                        null=True,
                        verbose_name="Potassium",
                    ),
                ),
            ],
            options={
                "verbose_name": "Nutritional Information",
                "verbose_name_plural": "Nutritional Information",
            },
        ),
        migrations.AddField(
            model_name="recipe",
            name="favourited_by",
            field=models.ManyToManyField(
                blank=True,
                related_name="favourite_recipes",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Favourited by",
            ),
        ),
        migrations.CreateModel(
            name="Ingredient",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("order", models.PositiveIntegerField(blank=True, null=True, verbose_name="Order")),
                (
                    "amount",
                    models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True, verbose_name="Amount"),
                ),
                (
                    "amount_max",
                    models.DecimalField(
                        blank=True,
                        decimal_places=5,
                        max_digits=10,
                        null=True,
                        verbose_name="Max Amount",
                    ),
                ),
                ("note", models.CharField(blank=True, max_length=100, verbose_name="Note")),
                ("note_en", models.CharField(blank=True, max_length=100, null=True, verbose_name="Note")),
                ("note_fr", models.CharField(blank=True, max_length=100, null=True, verbose_name="Note")),
                ("note_ja", models.CharField(blank=True, max_length=100, null=True, verbose_name="Note")),
                ("optional", models.BooleanField(default=False, verbose_name="Optional")),
                (
                    "food",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ingredients",
                        to="food.food",
                        verbose_name="Food",
                    ),
                ),
                (
                    "qualifier",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="recipes.ingredientqualifier",
                        verbose_name="Qualifier",
                    ),
                ),
                (
                    "recipe",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ingredients",
                        to="recipes.recipe",
                        verbose_name="Recipe",
                    ),
                ),
                (
                    "unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="units.unit",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="ingredients",
                        to="recipes.ingredientgroup",
                        verbose_name="Group",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ingredient",
                "verbose_name_plural": "Ingredients",
                "ordering": ("order",),
            },
        ),
        migrations.AlterUniqueTogether(
            name="ingredientgroup",
            unique_together={("name", "recipe")},
        ),
    ]
